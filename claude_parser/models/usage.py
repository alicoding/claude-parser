"""
Token usage models for Claude messages.

Based on analysis of 41,085 real messages.
SOLID: Single responsibility for token usage tracking
"""

from typing import Optional
from pydantic import BaseModel, Field


class CacheCreation(BaseModel):
    """Cache creation breakdown."""

    ephemeral_5m_input_tokens: int = Field(
        default=0,
        description="Tokens added to 5-minute ephemeral cache"
    )
    ephemeral_1h_input_tokens: int = Field(
        default=0,
        description="Tokens added to 1-hour ephemeral cache"
    )


class ServerToolUse(BaseModel):
    """Server tool usage tracking."""

    web_search_requests: int = Field(
        default=0,
        description="Number of web searches performed"
    )


class UsageInfo(BaseModel):
    """Token usage information for assistant messages.

    Found in message.usage field of assistant messages.
    Critical for understanding token economy and costs.
    """

    # Core token counts (always present)
    input_tokens: int = Field(
        description="Tokens in the input to the model"
    )
    output_tokens: int = Field(
        description="Tokens generated by the model"
    )

    # Cache usage (critical for token economy!)
    cache_creation_input_tokens: int = Field(
        default=0,
        description="Tokens added to cache during this request"
    )
    cache_read_input_tokens: int = Field(
        default=0,
        description="Tokens read from cache during this request"
    )

    # Detailed cache breakdown (optional)
    cache_creation: Optional[CacheCreation] = Field(
        None,
        description="Detailed cache creation breakdown"
    )

    # Service tier (optional)
    service_tier: Optional[str] = Field(
        None,
        description="Service tier: 'standard' or 'premium'"
    )

    # Tool usage tracking (optional)
    server_tool_use: Optional[ServerToolUse] = Field(
        None,
        description="Server tool usage tracking"
    )

    @property
    def total_tokens(self) -> int:
        """Calculate total tokens processed."""
        return (
            self.input_tokens +
            self.output_tokens +
            self.cache_creation_input_tokens +
            self.cache_read_input_tokens
        )

    @property
    def cache_efficiency(self) -> float:
        """Calculate cache efficiency ratio (0-1)."""
        total_cache = self.cache_creation_input_tokens + self.cache_read_input_tokens
        if total_cache == 0:
            return 0.0
        return self.cache_read_input_tokens / total_cache
