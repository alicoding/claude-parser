name: Validate AI Context Documentation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
    paths:
      - '**.py'
      - 'docs/ai/**'
      - '.github/workflows/validate-ai-context.yml'

jobs:
  validate-inventory:
    name: Validate Codebase Inventory
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
          
      - name: Generate fresh inventory
        run: |
          poetry run python scripts/codebase_inventory.py . --output /tmp/fresh_inventory.json
          
      - name: Compare with committed inventory
        run: |
          python -c "
          import orjson
          import sys
          from pathlib import Path
          
          committed = orjson.loads(Path('docs/ai/CODEBASE_INVENTORY.json').read_bytes())
          fresh = orjson.loads(Path('/tmp/fresh_inventory.json').read_bytes())
          
          if committed['summary'] != fresh['summary']:
              print('❌ Codebase inventory is out of date!')
              print(f\"Committed: {committed['summary']}\")
              print(f\"Fresh: {fresh['summary']}\")
              sys.exit(1)
          else:
              print('✅ Codebase inventory is up to date')
          "
          
      - name: Check inventory sync script
        run: poetry run python scripts/check_inventory_sync.py
        
      - name: Verify specification compliance
        run: poetry run python scripts/verify_spec.py
        
      - name: Check feature matrix
        run: |
          poetry run python scripts/feature_matrix.py check
          
      - name: Validate AI context files exist
        run: |
          for file in \
            docs/ai/AI_CONTEXT.md \
            docs/ai/CAPABILITY_MATRIX.md \
            docs/ai/ARCHITECTURE_DECISIONS.md \
            docs/ai/README.md; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required AI context file: $file"
              exit 1
            fi
          done
          echo "✅ All AI context files present"

  test-documentation-generation:
    name: Test Documentation Generation
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
          
      - name: Test inventory generator
        run: |
          # Test that generator runs without errors
          poetry run python scripts/codebase_inventory.py . --output /tmp/test.json
          poetry run python scripts/codebase_inventory.py . --output /tmp/test.md --format summary
          
      - name: Test feature matrix generator
        run: |
          poetry run python scripts/feature_matrix.py show
          poetry run python scripts/feature_matrix.py markdown --output /tmp/features.md
          
      - name: Validate generated JSON
        run: |
          python -c "
          import orjson
          from pathlib import Path
          
          # Validate JSON is well-formed
          data = orjson.loads(Path('/tmp/test.json').read_bytes())
          
          # Check required fields
          assert 'project' in data
          assert 'summary' in data
          assert 'packages' in data
          
          print('✅ Generated inventory is valid JSON')
          "

  enforce-documentation-updates:
    name: Enforce Documentation Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for diff
          
      - name: Check if Python files changed
        id: check_files
        run: |
          # Get list of changed Python files
          git diff --name-only origin/${{ github.base_ref }}..HEAD | grep '\.py$' > /tmp/changed_files.txt || true
          
          if [ -s /tmp/changed_files.txt ]; then
            echo "python_changed=true" >> $GITHUB_OUTPUT
            echo "Python files changed:"
            cat /tmp/changed_files.txt
          else
            echo "python_changed=false" >> $GITHUB_OUTPUT
            echo "No Python files changed"
          fi
          
      - name: Check if inventory was updated
        if: steps.check_files.outputs.python_changed == 'true'
        run: |
          # Check if CODEBASE_INVENTORY.json was modified
          git diff --name-only origin/${{ github.base_ref }}..HEAD | grep 'CODEBASE_INVENTORY.json' > /dev/null
          
          if [ $? -ne 0 ]; then
            echo "⚠️ Warning: Python files changed but CODEBASE_INVENTORY.json not updated"
            echo "Please run: python scripts/codebase_inventory.py . --output docs/ai/CODEBASE_INVENTORY.json"
            # Don't fail the build, just warn
          else
            echo "✅ Inventory was updated with Python changes"
          fi