{
  "collection": "claude-parser",
  "sections": {
    "api": "## Public CLI Commands:\n\n### `cg_reflog.py`\n- `show(uuid: str)`: Show details of a specific message (like git show)\n- `reflog(limit: int)`: Show all operations history (like git reflog)\n\n### `cg_basic.py`\n- `status()`: Show current session and project status\n- `log(limit: int)`: Show message history\n\n### `cg_advanced.py`\n- `find(pattern: str)`: Find files in any message (like git log --all --grep)\n- `blame()`: Show file history\n\n## Public SDK Functions:\n\n### `core.py`\n- `estimate_cost(total_tokens: int, model: str) -> float`: Estimate API cost using configured prices\n\n## Public API Endpoints:\n\n### `api.py`\n- `parse_hook_input() -> Dict[str, Any]`: Parse hook input from stdin\n- `allow_operation(reason: str)`: Allow the operation (PreToolUse)\n- `block_operation(reason: str)`: Block the operation (PreToolUse/PostToolUse/Stop)\n- `request_approval(reason: str)`: Request user approval (PreToolUse)\n- `add_context(text: str)`: Add context for Claude (UserPromptSubmit/SessionStart)\n- `execute_hook(plugin_callback: Callable) -> None`: Execute hook with plugin callback\n\n## MCP Tool Functions:\n\n- No MCP tool functions were found in the provided files.\n\nThis documentation provides a clear overview of the user-facing interfaces in the Claude Parser project, including CLI commands, SDK functions, API endpoints, and MCP tool functions.",
    "architecture": "The Claude Parser system is designed to provide a Git-like interface for managing code conversations and analyzing project contexts. Here is a high-level overview of the system architecture to help users understand how to use the system:\n\n1. Main Purpose:\n   - The main purpose of the Claude Parser tool is to provide a Git-like CLI interface for managing code conversations, analyzing project contexts, and performing various operations on JSONL files containing code conversation data.\n\n2. Key Components Users Interact With:\n   - Command Line Interface (CLI): Users interact with the tool through a command-line interface to execute various commands for managing sessions, analyzing projects, and performing operations on JSONL files.\n   - Application Programming Interface (API): Users can interact with the system programmatically through APIs to access and manipulate data stored in JSONL files.\n   - Model-Controller-Presenter (MCP): The system utilizes a Model-Controller-Presenter architecture to manage data models, handle user interactions, and present information to users in a structured format.\n\n3. How Data Flows Through the System:\n   - Data flows through the system in a structured manner, starting from the input provided by users through the CLI or API.\n   - The data is processed and analyzed using various modules such as analytics, queries, and navigation to extract meaningful insights and perform operations on JSONL files.\n   - The processed data is then presented to users through the CLI interface or API responses, allowing users to view and interact with the results of their commands.\n\n4. Integration Points:\n   - Users can connect to the system through the CLI interface to execute commands and manage code conversations.\n   - Users can also interact with the system programmatically through APIs to access data, perform analytics, and integrate the Claude Parser tool into their workflows.\n\nOverall, the Claude Parser system provides users with a powerful tool for managing code conversations, analyzing project contexts, and performing operations on JSONL files. By understanding the key components, data flow, and integration points of the system, users can effectively use the tool to enhance their code collaboration and analysis processes.",
    "usage": "# USER GUIDE: Claude Parser Tool\n\n## CLI Commands:\n1. **Show Message History:**\n   - Command: `cg_basic log`\n   - Description: Displays the message history from the current session.\n   - Example: `cg_basic log --limit 10`\n\n2. **Show Specific Message Details:**\n   - Command: `cg_reflog show <uuid>`\n   - Description: Shows details of a specific message using its UUID.\n   - Example: `cg_reflog show abc123`\n\n3. **Show Operations History:**\n   - Command: `cg_reflog reflog`\n   - Description: Displays all operations history across sessions.\n   - Example: `cg_reflog reflog --limit 20`\n\n## Calling SDK from Python Code:\n1. **Analyzing Tool Usage:**\n   - Function: `analyze_tool_usage(session_data: Dict[str, Any]) -> Dict[str, Any]`\n   - Description: Analyzes tool usage from session data.\n   - Example: `analyze_tool_usage(session_data)`\n\n2. **Calculating Session Cost:**\n   - Function: `calculate_session_cost(...) -> Dict[str, float]`\n   - Description: Calculates session cost based on token usage.\n   - Example: `calculate_session_cost(input_tokens, output_tokens, cache_read_tokens, cache_creation_tokens, model)`\n\n3. **Calculating Context Window:**\n   - Function: `calculate_context_window(jsonl_path: Optional[str] = None) -> Dict[str, int]`\n   - Description: Calculates context window usage with user/assistant separation.\n   - Example: `calculate_context_window(jsonl_path)`\n\n## Integrating with MCP Tools in Claude:\n- The tool provides functions to analyze tool usage, calculate session cost, and estimate token usage.\n- These functions can be integrated with other MCP tools in Claude for comprehensive analytics and billing.\n\n## Common Workflows and Use Cases:\n1. **Analyzing Tool Usage:**\n   - Use the `analyze_tool_usage` function to track tool usage patterns in sessions.\n2. **Calculating Session Cost:**\n   - Utilize the `calculate_session_cost` function to estimate the cost of a session based on token usage.\n3. **Monitoring Context Window Usage:**\n   - Use the `calculate_context_window` function to monitor and manage context window token usage.\n\nBy following the provided CLI commands and SDK functions, users can effectively analyze tool usage, calculate session costs, and integrate with other MCP tools in Claude for enhanced analytics and workflows.",
    "installation": "To install Claude Parser and get up and running quickly, follow these steps:\n\n1. Installation via pip/poetry/pipx:\n   - If you are using pip, run `pip install claude-parser`.\n   - If you prefer poetry, run `poetry add claude-parser`.\n   - For pipx, run `pipx install claude-parser`.\n\n2. Required environment variables (.env setup):\n   - Create a `.env` file in your project directory.\n   - Add the following environment variables:\n     ```\n     DEBUG=True\n     API_KEY=test-key-12345\n     DATABASE_URL=sqlite:///test.db\n     ```\n\n3. How to configure for Claude (MCP setup):\n   - Ensure you have the necessary configuration settings in `settings.py`.\n   - Modify the settings as needed for your environment.\n\n4. Quick start: First commands to try:\n   - Run `claude-parser status` to show current session and project status.\n   - Run `claude-parser log` to show message history.\n\n5. Verify installation is working:\n   - Run any of the commands mentioned above to ensure Claude Parser is installed correctly.\n   - If you see the expected output, the installation was successful.\n\nBy following these steps, you should be able to install Claude Parser and start using it quickly. If you encounter any issues during installation, feel free to reach out for assistance."
  }
}