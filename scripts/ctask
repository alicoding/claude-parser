#!/bin/bash
# ctask - Claude Task wrapper for dstask with PROJECT ENFORCEMENT
# Ensures all tasks are Claude-ready with full context and proper project tags
#
# Usage: ctask add "description"          # Creates enforced task for current project
#        ctask start <id>                 # Validates before starting
#        ctask show                       # Shows only current project tasks
#        ctask <any other>                # Passes through to dstask

set -e

# Detect current project from directory
CURRENT_DIR=$(pwd)
PROJECT=""

if [[ "$CURRENT_DIR" == *"claude-parser"* ]]; then
    PROJECT="claude-parser"
    PROJECT_DIR="/Volumes/AliDev/ai-projects/claude-parser"
elif [[ "$CURRENT_DIR" == *"temporal-hooks"* ]]; then
    PROJECT="temporal-hooks"
    PROJECT_DIR="/Volumes/AliDev/ai-projects/temporal-hooks"
elif [[ "$CURRENT_DIR" == *"task-enforcer"* ]]; then
    PROJECT="shared"
    PROJECT_DIR="/Volumes/AliDev/ai-projects/task-enforcer"
else
    echo "‚ö†Ô∏è  WARNING: Not in a recognized project directory!"
    echo "   Working directory: $CURRENT_DIR"
    PROJECT="unknown"
    PROJECT_DIR="$CURRENT_DIR"
fi

PYTHON="python"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# If 'show' command, filter by project
if [ "$1" = "show" ] || [ "$1" = "" ] || [ -z "$1" ]; then
    echo -e "${YELLOW}üìã Showing tasks for project: $PROJECT${NC}"
    dstask +$PROJECT
    if [ "$PROJECT" != "shared" ]; then
        echo -e "${YELLOW}üìã Shared tasks:${NC}"
        dstask +shared
    fi
    exit $?
fi

# If 'add' command, use enforced creation with project tag
if [ "$1" = "add" ]; then
    shift  # Remove 'add'
    echo -e "${YELLOW}ü§ñ Creating task for project: $PROJECT${NC}"

    # Create task with project tag
    TASK_DESC="$@"
    # Run the enforced task creation
    $PYTHON "$PROJECT_DIR/scripts/create_enforced_task.py" "$TASK_DESC"

    # Get the last created task and add project tag
    LAST_TASK=$(dstask show-open --json | python -c "import sys, json; tasks=json.load(sys.stdin); print(max(t['id'] for t in tasks))")
    dstask $LAST_TASK modify +$PROJECT
    echo -e "${GREEN}‚úÖ Task $LAST_TASK tagged with +$PROJECT${NC}"
    exit $?
fi

# If 'start' command, validate task first
if [ "$1" = "start" ]; then
    TASK_ID=$2

    echo -e "${YELLOW}üîç Validating task $TASK_ID before starting...${NC}"

    # Check if task has required context
    NOTES=$(dstask $TASK_ID note)

    ERRORS=()

    # Check for required sections
    if ! echo "$NOTES" | grep -q "RESEARCH:"; then
        ERRORS+=("Missing RESEARCH section")
    fi

    if ! echo "$NOTES" | grep -q "DUPLICATES:"; then
        ERRORS+=("Missing DUPLICATES check")
    fi

    if ! echo "$NOTES" | grep -q "COMPLEXITY:"; then
        ERRORS+=("Missing COMPLEXITY analysis")
    fi

    if ! echo "$NOTES" | grep -q "SUCCESS CRITERIA:"; then
        ERRORS+=("Missing SUCCESS CRITERIA")
    fi

    # If errors, don't allow start
    if [ ${#ERRORS[@]} -gt 0 ]; then
        echo -e "${RED}‚ùå Task $TASK_ID is not Claude-ready:${NC}"
        for error in "${ERRORS[@]}"; do
            echo -e "${RED}  - $error${NC}"
        done
        echo ""
        echo -e "${YELLOW}Fix with:${NC}"
        echo "  1. python scripts/research.py 'task description'"
        echo "  2. grep -r 'similar_code' claude_parser/"
        echo "  3. radon cc affected_files.py"
        echo "  4. dstask $TASK_ID note"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Task $TASK_ID is Claude-ready!${NC}"
fi

# Pass through to regular dstask
exec dstask "$@"
